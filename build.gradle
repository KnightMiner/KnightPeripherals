buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "central"
            url = "https://repo1.maven.org/maven2/"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
	// Load config.  It shall from now be referenced as simply config or project.config
	def prop = new Properties()
	prop.load(it)
	project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.mc_version}-${config.mod_version}"
group = "knightminer.knightperipherals" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "KnightPeripherals"

minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "../run"
    replace '${version}', project.version
}

repositories {
    maven  {
        name = "central"
        url = "https://repo1.maven.org/maven2/"
    }
    maven {
        name = "Chicken-Bones"
        url = "http://chickenbones.net/maven"
    }
}

dependencies {
	compile "codechicken:NotEnoughItems:1.7.10-1.0.4.107:dev"
	compile "codechicken:CodeChickenCore:1.7.10-1.0.6.44:dev"
	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.136:dev"
	// ex nihilo and ex compressum are in libs, as I don't know the maven repository URL for them
}

// this is from Ex Nihilo's build.gradle, not sure if it still is used
task copyChicken(type: Copy, dependsOn: "extractUserDev") {
    from { configurations.compile }
    include "**/*Chicken*.jar", "**/*NotEnoughItems*.jar"
    exclude "**/CodeChickenLib*" // because CCC downloads it anyways.. -_-
    into file(minecraft.runDir + "/../mods") // paralell to the assets dir

    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
